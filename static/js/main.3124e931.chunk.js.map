{"version":3,"sources":["_src/gameOfLife.js","_src/gameOfLifeUtil.js","Cell.js","App.js","serviceWorker.js","index.js"],"names":["require","zipper","coordinateGenerator","createAdjacentNumber","number","isAlive","currentGeneration","cell","some","element","module","exports","nextGeneration","bound","worldSize","keys","Object","topLeft","bottomRight","rowCoordinates","colCoordinates","reduce","result","initWorld","countAlive","allNeighbours","neighbourCount","neighbours","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","neighbour","value","err","return","countAliveNeighbours","position","JSON","parse","adjacentRow","adjacentCol","splice","filter","verifyRow","verifyCol","validateNeighbour","verify","bind","map","x","column","row","push","startingIndex","endingIndex","indexex","index","Cell","react_default","a","createElement","width","height","fill","this","props","color","col","y","stroke","strokeWidth","Component","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","gen","_this2","timerID","setInterval","tick","setState","cells","colors","i","j","src_Cell","concat","genCells","forEach","join","toColourLookup","className","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+IAAwCA,EAAQ,IAAxCC,WAAQC,wBAEVC,EAAuB,SAASC,GACpC,MAAO,CAACA,EAAO,EAAEA,EAAOA,EAAO,IAG3BC,EAAU,SAASC,EAAmBC,GAC1C,OAAOD,EAAkBE,KAAK,SAAAC,GAAO,OAAIA,EAAQ,IAAMF,EAAK,IAAME,EAAQ,IAAMF,EAAK,MA2DvFG,EAAOC,QAAU,CAAEC,eATI,SAASN,EAAmBO,GACjD,IAvCiCC,EAuC7BC,EAAOC,OAAOD,KA3BF,SAASF,GAAO,IAC3BI,EAAwBJ,EAAxBI,QAASC,EAAeL,EAAfK,YACVC,EAAiBjB,EAAoBe,EAAQ,GAAGC,EAAY,IAC5DE,EAAiBlB,EAAoBe,EAAQ,GAAGC,EAAY,IAEhE,OADYC,EAAeE,OAAOpB,EAAOmB,GAAgB,IAC5CC,OAAO,SAACC,EAAOf,GAAqC,OAA1Be,EAAO,IAAIf,EAAK,KAAK,IAAYe,GAAS,IAsB1DC,CAAUV,IAE7BW,EArBuB,SAASC,EAAenB,GACnD,OAAO,SAASgB,EAAQf,GACtB,IAAImB,EAAiB,EACjBC,EAAaF,EAAclB,GAFHqB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAG5B,QAAAC,EAAAC,EAAsBN,EAAtBO,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAiC,KAAxBU,EAAwBN,EAAAO,MACnBlC,EAAQC,EAAmBgC,IAAcZ,KAJ3B,MAAAc,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAO5B,OADAR,EAAOf,GAAQmB,EACRJ,GAaQoB,CADA3B,EAAKM,QAxCWP,EAwCcD,EAvCxC,SAASS,EAAQf,GACtB,IAAIoC,EAAWC,KAAKC,MAAMtC,GACtBuC,EAAc3C,EAAqBwC,EAAS,IAC5CI,EAAc5C,EAAqBwC,EAAS,IAC5ClB,EAAgBqB,EAAYzB,OAAOpB,EAAO8C,GAAa,IAG3D,OAFAtB,EAAcuB,OAAO,EAAE,GACvB1B,EAAOf,GAAQkB,EAAcwB,OAhBP,SAASnC,GACjC,OAAO,SAASwB,GAAU,IACnBrB,EAAwBH,EAAxBG,QAASC,EAAeJ,EAAfI,YACVgC,EAAYjC,EAAQ,IAAMqB,EAAU,IAAMA,EAAU,IAAMpB,EAAY,GACtEiC,EAAYb,EAAU,IAAMrB,EAAQ,IAAMqB,EAAU,IAAMpB,EAAY,GAC1E,OAAOgC,GAAaC,GAWgBC,CAAkBtC,IAC/CQ,IAgC8C,IACLhB,GAC9CoB,EAAiBX,EAAKM,OAAOG,EAAY,IACzC6B,EAXc,SAAS3B,EAAgBpB,EAAmBC,GAC9D,IAAIE,EAAUmC,KAAKC,MAAMtC,GAEzB,OADoC,GAAxBmB,EAAenB,IAAcF,EAAQC,EAAkBG,IAC3B,GAAxBiB,EAAenB,IAQN+C,KAAK,KAAK5B,EAAepB,GAClD,OAAOS,EAAKkC,OAAOI,GAAQE,IAAI,SAAAC,GAAC,OAAIZ,KAAKC,MAAMW,sBC9CjD9C,EAAOC,QAAU,CAAEV,OAjBJ,SAASwD,GACtB,OAAO,SAASnC,EAAQoC,GAAK,IAAA9B,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAC3B,QAAAC,EAAAC,EAAmBwB,EAAnBvB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA2B,KAAnBnB,EAAmBuB,EAAAO,MACzBjB,EAAOqC,KAAK,CAACD,EAAKjD,KAFO,MAAA+B,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAI3B,OAAOR,IAYiBpB,oBARA,SAAS0D,EAAeC,GAElD,IADA,IAAIC,EAAU,GACNC,EAAQH,EAAeG,GAASF,EAAaE,IACnDD,EAAQH,KAAKI,GAEf,OAAOD,wHCAME,mLAVX,OAAOC,EAAAC,EAAAC,cAAA,QAAMC,MAAM,KACnBC,OAAO,KACPC,KAAMC,KAAKC,MAAMC,OAAS,QAC1BjB,EAAkB,GAAfe,KAAKC,MAAME,IACdC,EAAkB,GAAfJ,KAAKC,MAAMd,IACdkB,OAAO,YACPC,YAAa,WAREC,aCAZlE,EAAkBZ,EAAQ,IAA1BY,eAiDQmE,cA1Bb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAhE,OAAAiE,EAAA,EAAAjE,CAAAuD,KAAAQ,IACjBC,EAAAhE,OAAAkE,EAAA,EAAAlE,CAAAuD,KAAAvD,OAAAmE,EAAA,EAAAnE,CAAA+D,GAAAK,KAAAb,KAAMC,KACDa,MAAQ,CAACC,IAAKN,EAAKR,MAAMc,KAFbN,mFAIC,IAAAO,EAAAhB,KAClBA,KAAKiB,QAAUC,YAAY,kBAAIF,EAAKG,QAAO,oCAG3CnB,KAAKoB,SAAS,SAACN,EAAMb,GAEnB,MAAO,CAACc,IADK1E,EAAeyE,EAAMC,IAAI,CAACrE,QAAQ,CAAC,EAAE,GAAGC,YAAY,CAAC,GAAG,0CAKvE,IACI0E,EAlCS,SAACC,GAEhB,IADA,IAAID,EAAQ,GACJE,EAAE,EAAEA,EAAE,GAAGA,IACf,IAAI,IAAIC,EAAE,EAAEA,EAAE,GAAGA,IACfH,EAAMjC,KAAKM,EAAAC,EAAAC,cAAC6B,EAAD,CAAMtC,IAAKoC,EAAGpB,IAAKqB,EAAGtB,MAAOoB,EAAM,GAAAI,OAAIH,EAAJ,KAAAG,OAASF,OAG3D,OAAOH,EA2BKM,CAxBO,SAACN,GACpB,IAAIC,EAAO,GAIX,OAHAD,EAAMO,QAAQ,SAAA5F,GAdF,IAAC2D,EAeX2B,GAfW3B,EAeE3D,EAfI2D,EAAEkC,KAAK,OAeJ,UAEfP,EAkBMQ,CAAe9B,KAAKc,MAAMC,MAErC,OACErB,EAAAC,EAAAC,cAAA,OAAKmC,UAAU,OACbrC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,IAAKC,OAAQ,KACtBuB,WApBOd,aCZEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DC4CNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAKxB,IAxDR,CAAE,CAAE,EAAG,GACpyB,SAASC,eAAe,SDmEvD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3124e931.chunk.js","sourcesContent":["const { zipper, coordinateGenerator } = require(\"./gameOfLifeUtil.js\");\n\nconst createAdjacentNumber = function(number) {\n  return [number-1,number,number+1];\n}\n\nconst isAlive = function(currentGeneration, cell) {\n  return currentGeneration.some(element => element[0] == cell[0] && element[1] == cell[1]);\n}\n\nconst validateNeighbour = function(worldSize) {\n  return function(neighbour){\n    let {topLeft, bottomRight} = worldSize;\n    let verifyRow = topLeft[0] <= neighbour[0] && neighbour[0] <= bottomRight[0];\n    let verifyCol = neighbour[1] >= topLeft[1] && neighbour[1] <= bottomRight[1];\n    return verifyRow && verifyCol;\n  }\n}\n\nconst extractNeighbours = function(worldSize) {\n  return function(result, cell) {\n    let position = JSON.parse(cell);\n    let adjacentRow = createAdjacentNumber(position[0]);     \n    let adjacentCol = createAdjacentNumber(position[1]); \n    let allNeighbours = adjacentRow.reduce(zipper(adjacentCol),[]);\n    allNeighbours.splice(4,1);\n    result[cell] = allNeighbours.filter(validateNeighbour(worldSize));\n    return result;\n  }\n}\n\nconst initWorld = function(bound) {\n  let {topLeft, bottomRight} = bound;\n  let rowCoordinates = coordinateGenerator(topLeft[0],bottomRight[0]);\n  let colCoordinates = coordinateGenerator(topLeft[1],bottomRight[1]);\n  let cells = rowCoordinates.reduce(zipper(colCoordinates),[]);\n  return cells.reduce((result,cell) => { result['['+cell+']']=\"D\"; return result}, {});\n}\n\nconst countAliveNeighbours = function(allNeighbours, currentGeneration){\n  return function(result, cell) {\n    let neighbourCount = 0;\n    let neighbours = allNeighbours[cell];\n    for (let neighbour of neighbours){\n      let alive = isAlive(currentGeneration, neighbour) && neighbourCount++; \n    }\n    result[cell] = neighbourCount;\n    return result;\n  }\n}\n\nconst verifyRules = function(neighbourCount, currentGeneration, cell){\n  let element = JSON.parse(cell);\n  let alive = neighbourCount[cell] == 2 && isAlive(currentGeneration,element);\n  return alive || neighbourCount[cell] == 3;\n}\n\nconst nextGeneration = function(currentGeneration, bound) {\n  let keys = Object.keys(initWorld(bound));\n  let neighbours = keys.reduce(extractNeighbours(bound), {});\n  let countAlive = countAliveNeighbours(neighbours, currentGeneration);\n  let neighbourCount = keys.reduce(countAlive, {});\n  let verify = verifyRules.bind(null,neighbourCount,currentGeneration);\n  return keys.filter(verify).map(x => JSON.parse(x));\n}\n\nmodule.exports = { nextGeneration };\n","const zipper = function(column) {\n  return function(result, row) {\n    for(let element of column) {\n      result.push([row, element]);\n    }\n    return result;\n  }\n}\n\nconst coordinateGenerator = function(startingIndex, endingIndex) {\n  let indexex = [];\n  for(let index = startingIndex; index <= endingIndex; index++) {\n    indexex.push(index);\n  }\n  return indexex;\n}\n\nmodule.exports = { zipper , coordinateGenerator};\n","import React, { Component } from 'react';\n\nclass Cell extends Component {\n  render() {\n    return <rect width=\"10\" \n    height=\"10\"\n    fill={this.props.color || \"white\"}\n    x={this.props.col*10} \n    y={this.props.row*10} \n    stroke=\"lightgray\" \n    strokeWidth={1}></rect>\n  }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport Cell from './Cell';\nconst {nextGeneration} = require('./_src/gameOfLife.js');\n\nconst genId = (a) => a.join(\"_\");\n\nconst genCells = (colors) => {\n  let cells = [];\n  for(let i=0;i<17;i++) {\n    for(let j=0;j<17;j++) {\n      cells.push(<Cell row={i} col={j} color={colors[`${i}_${j}`]}/>);\n    }\n  }\n  return cells;\n}\n\nconst toColourLookup=(cells) => {\n  let colors={};\n  cells.forEach(cell => {\n    colors[genId(cell)]=\"black\"\n  });\n  return colors;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {gen: this.props.gen};\n  }\n  componentDidMount() {\n    this.timerID = setInterval(()=>this.tick(),180)\n  }\n  tick() {\n    this.setState((state,props)=>{\n      let newState=nextGeneration(state.gen,{topLeft:[0,0],bottomRight:[17,17]});\n      return {gen:newState};\n    });\n  }\n  render() {\n    let colors=toColourLookup(this.state.gen)\n    let cells=genCells(colors);\n    return (\n      <div className=\"App\">\n        <svg width={800} height={800}>\n          {cells}\n        </svg>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst coords=[ [ 1, 5 ],\n[ 1, 11 ],\n[ 2, 5 ],\n[ 2, 11 ],\n[ 3, 5 ],\n[ 3, 6 ],\n[ 3, 10 ],\n[ 3, 11 ],\n[ 5, 1 ],\n[ 5, 2 ],\n[ 5, 3 ],\n[ 5, 6 ],\n[ 5, 7 ],\n[ 5, 9 ],\n[ 5, 10 ],\n[ 5, 13 ],\n[ 5, 14 ],\n[ 5, 15 ],\n[ 6, 3 ],\n[ 6, 5 ],\n[ 6, 7 ],\n[ 6, 9 ],\n[ 6, 11 ],\n[ 6, 13 ],\n[ 7, 5 ],\n[ 7, 6 ],\n[ 7, 10 ],\n[ 7, 11 ],\n[ 9, 5 ],\n[ 9, 6 ],\n[ 9, 10 ],\n[ 9, 11 ],\n[ 10, 3 ],\n[ 10, 5 ],\n[ 10, 7 ],\n[ 10, 9 ],\n[ 10, 11 ],\n[ 10, 13 ],\n[ 11, 1 ],\n[ 11, 2 ],\n[ 11, 3 ],\n[ 11, 6 ],\n[ 11, 7 ],\n[ 11, 9 ],\n[ 11, 10 ],\n[ 11, 13 ],\n[ 11, 14 ],\n[ 11, 15 ],\n[ 13, 5 ],\n[ 13, 6 ],\n[ 13, 10 ],\n[ 13, 11 ],\n[ 14, 5 ],\n[ 14, 11 ],\n[ 15, 5 ],\n[ 15, 11 ] ];\nReactDOM.render(<App gen={coords}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}